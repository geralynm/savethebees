//hive process file.
//reads data from CSV for temperature and humidity, performs FFT on audio sample,
//compares to thresholds
//and adds flags to CSV.

 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
 #include <stdint.h>
 #include <string.h>
 #include <sys/mman.h>
 #include <fcntl.h>
 #include <unistd.h>
 //#include <alsa/asoundlib.h>
 #include <math.h>
 
 #include "kiss_fft.h"
 #include "kiss_fftr.h"

 #define SND_CARD "default"

 #define RIFF 0x46464952
 #define WAVE 0x45564157
 #define FMT 0x20746d66
 #define DATA 0x61746164
 #define PCM 1

#define OK_FLAG 0
#define LOW_FLAG 1
#define HIGH_FLAG 2

#define FREQ_4DAY_BEE 285
#define FREQ_6DAY_BEE 225
#define FREQ_9DAY_BEE 190
#define FREQ_QUEEN 350

#define PI 3.141592653

 struct wave_header {
   uint32_t ChunkID;
   uint32_t ChunkSize;
   uint32_t Format;
   uint32_t Subchunk1ID;
   uint32_t Subchunk1Size;
   uint16_t AudioFormat;
   uint16_t NumChannels;
   uint32_t SampleRate;
   uint32_t ByteRate;
   uint16_t BlockAlign;
   uint16_t BitsPerSample;
   uint32_t Subchunk2ID;
   uint32_t Subchunk2Size;
 };

struct hivedata{
	uint32_t year;
	uint32_t month;
	uint32_t day;
	uint32_t hour;
	uint32_t minute;
	uint32_t humidity;
	uint32_t temperature;
	uint8_t humidity_flag;
	uint8_t temperature_flag;
	uint8_t bee_flags[4];
};

//read wave header
 int read_wave_header(FILE *fp, struct wave_header *dest) {
   if (!dest || !fp) {
     return -ENOENT;
   }

   fseek(fp, 0, SEEK_SET);
   fread(dest, sizeof(struct wave_header), 1, fp);
   return 0;
 }

//parse wave header
 int parse_wave_header(struct wave_header hdr) {
   
   printf("Number of Channels: %d\n", hdr.NumChannels);                      //print out information: number of channels, sample rate, total size
   printf("Sample Rate %d\n", hdr.SampleRate);
   printf("Bits per sample %d\n", hdr.BitsPerSample);
   printf("Total Size %d\n", sizeof(hdr));

   if (hdr.ChunkID != RIFF) {                                                // verify that this is a RIFF file header
     return -ENOENT;
   }

   if (hdr.Format != WAVE) {                                                 // verify that this is WAVE file
     return -ENOENT;
   }

   if (hdr.AudioFormat != PCM) {                                             // verify that this is PCM
     return -ENOENT;
   }

   return 0;
 }

//handles the FFT process for the entire WAVE file.   
float* FFT_handle(FILE *fp, struct wave_header hdr) {
	kiss_fftr_cfg cfg = kiss_fftr_alloc(11024, 0, NULL, NULL);
	float master_fft_array[11024];
	float buf[11024];
	kiss_fft_cpx fft_output[11024];
	unsigned int start = sizeof(hdr);
	fseek(fp, start, SEEK_SET);
	
	//loop through the whole file
	while(!feof(fp)) {
		//read into the buffer
		fread(buf, sizeof(buf), 1, fp);
		//window the buffer
		for(int i = 0; i < sizeof(buf)/4; i++) {
			buf[i] = buf[i]*0.5*(1-cos(2*PI*i/11023));
		}
		//run fft on this window, calculate magnitudes and add it to master array
		kiss_fftr(cfg, buf, fft_output);
		for(int i = 0; i < sizeof(fft_output)/8; i++) {
			float magnitude = sqrt(pow(fft_output[i].r, 2)+pow(fft_output[i].i, 2));
			master_fft_array[i] += magnitude;
		}
		//advance the start offset for the next loop by half a window length
		start += 11024/2*sizeof(float);
		//go to the next position
		fseek(fp, start, SEEK_SET); 
	}
	kiss_fftr_free(cfg);
}

//compares fft output of the file to expected values and modifies hive data file
//with flags corresponding to levels of desired frequencies.
int audio_compare(float *fft_array, int numsamples, struct wave_header *hdr, struct hivedata *hive) {
	
	//define thresholds for bee age distribution as percentages of total population
	//4daybee_low, 4daybee_high, 6daybee_low, 6daybee_high, 9daybee_low, 9daybee_high
	float bee_age_dist[] = {34.6, 47.5, 17.9, 28.1, 13.3, 20.7};

	int freq_bin_size = hdr->SampleRate/numsamples/4;
	float amp_4day_bee = fft_array[FREQ_4DAY_BEE/freq_bin_size];
	float amp_6day_bee = fft_array[FREQ_6DAY_BEE/freq_bin_size];
	float amp_9day_bee = fft_array[FREQ_9DAY_BEE/freq_bin_size];
	float amp_queen = fft_array[FREQ_QUEEN/freq_bin_size];
	float amp_total_bee = amp_4day_bee + amp_6day_bee + amp_9day_bee;
	for (int i = 0; i < 4; i++) {
		hive->bee_flags[i] = OK_FLAG;
	}
	if (amp_4day_bee/amp_total_bee*100 < bee_age_dist[0]) {
		hive->bee_flags[0] = LOW_FLAG;
	}
	else if(amp_4day_bee/amp_total_bee*100 > bee_age_dist[1]) {
		hive->bee_flags[0] = HIGH_FLAG;
	}
	if (amp_6day_bee/amp_total_bee*100 < bee_age_dist[2]) {
		hive->bee_flags[1] = LOW_FLAG;
	}
	else if(amp_6day_bee/amp_total_bee*100 > bee_age_dist[3]) {
		hive->bee_flags[1] = HIGH_FLAG;
	}
	if (amp_4day_bee/amp_total_bee*100 < bee_age_dist[5]) {
		hive->bee_flags[2] = LOW_FLAG;
	}
	else if(amp_4day_bee/amp_total_bee*100 > bee_age_dist[5]) {
		hive->bee_flags[2] = HIGH_FLAG;
	}
} 

 int main(int argc, char** argv) {
   FILE* fp;
   int rc;
   struct wave_header hdr;
   
   fp = fopen("../test_recording.wav", "r");
   read_wave_header(fp, &hdr);
   rc = parse_wave_header(hdr);
   printf("%d\n", rc);
 }
